var program = [
  3,
  8,
  1001,
  8,
  10,
  8,
  105,
  1,
  0,
  0,
  21,
  34,
  51,
  76,
  101,
  114,
  195,
  276,
  357,
  438,
  99999,
  3,
  9,
  1001,
  9,
  3,
  9,
  1002,
  9,
  3,
  9,
  4,
  9,
  99,
  3,
  9,
  101,
  4,
  9,
  9,
  102,
  4,
  9,
  9,
  1001,
  9,
  5,
  9,
  4,
  9,
  99,
  3,
  9,
  1002,
  9,
  4,
  9,
  101,
  3,
  9,
  9,
  102,
  5,
  9,
  9,
  1001,
  9,
  2,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  99,
  3,
  9,
  1001,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  101,
  4,
  9,
  9,
  102,
  3,
  9,
  9,
  101,
  2,
  9,
  9,
  4,
  9,
  99,
  3,
  9,
  102,
  2,
  9,
  9,
  101,
  4,
  9,
  9,
  4,
  9,
  99,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  1,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  101,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  101,
  2,
  9,
  9,
  4,
  9,
  99,
  3,
  9,
  101,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  1,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  1,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  101,
  1,
  9,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  2,
  9,
  4,
  9,
  99,
  3,
  9,
  1001,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  101,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  1,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  1,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  101,
  2,
  9,
  9,
  4,
  9,
  99,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  1,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  101,
  1,
  9,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  99,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  101,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  101,
  1,
  9,
  9,
  4,
  9,
  3,
  9,
  101,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  101,
  1,
  9,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  1,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  99
];

let maxOutput = 0;
for (let i = 1234; i <= 43210; i++) {
  let phase = i.toString();
  if ([...phase].some(digit => digit > 4)) continue;
  phase = phase.length < 5 ? phase.padStart(5, "0") : phase;
  if (new Set([...phase]).size != 5) continue;

  const phases = [...phase];
  let input = [0];
  for (ph of phases) {
    input[1] = +ph;
    const result = intComputer(program, input);
    input[0] = result;
  }
  //   console.log(phases.join(""), input[0]);
  if (input[0] > maxOutput) {
    maxOutput = input[0];
    bestPhase = phases.join("");
  }
}

console.log(bestPhase, maxOutput);

function intComputer(extProgram, extInput) {
  let input = [...extInput];
  let program = [...extProgram];
  let output;
  let pointer = 0;
  let opCode = program[pointer];
  let step = 0;
  while (opCode !== 99) {
    const isPosMode = program[pointer] > 100 ? false : true;
    opCode = isPosMode
      ? program[pointer]
      : Number(program[pointer].toString().slice(-2));
    const params = isPosMode
      ? "000"
      : program[pointer]
          .toString()
          .slice(0, -2)
          .padStart(3, "0");
    const param1 = params[2] == 0 ? program[pointer + 1] : pointer + 1;
    const param2 = params[1] == 0 ? program[pointer + 2] : pointer + 2;
    const param3 = params[0] == 0 ? program[pointer + 3] : pointer + 3;
    switch (opCode) {
      case 1:
        program[param3] = program[param1] + program[param2];
        step = 4;
        break;
      case 2:
        program[param3] = program[param1] * program[param2];
        step = 4;
        break;
      case 3:
        program[param1] = input.pop();
        step = 2;
        break;
      case 4:
        output = program[param1];
        step = 2;
        break;
      case 5:
        pointer = program[param1] !== 0 ? program[param2] : pointer + 3;
        step = 0;
        break;
      case 6:
        pointer = program[param1] == 0 ? program[param2] : pointer + 3;
        step = 0;
        break;
      case 7:
        program[param3] = program[param1] < program[param2] ? 1 : 0;
        step = 4;
        break;
      case 8:
        program[param3] = program[param1] == program[param2] ? 1 : 0;
        step = 4;
        break;
    }
    pointer = pointer + step;
    if (program[pointer] == 99) return output;
  }
}
